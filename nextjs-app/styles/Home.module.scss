$max-width: 1100px;
$border-radius: 12px; /* 변수를 사용하는 이유는 여기서 값을 변경하면, 모든 스타일을 일괄 변경할 수 있다. */
$font-mono: ui-monospace, Menlo, Monaco, 'Cascadia Mono', 'Segoe UI Mono',
  'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro',
  'Fira Mono', 'Droid Sans Mono', 'Courier New', monospace;

$foreground-rgb: 0 0 0; /* 주의 SCSS에서 rgb 함수의 변수에는 3개의 숫자가 필요하다. */
$background-start-rgb: #d6dbdc; /* 주의 SCSS에서 rgba 함수의 변수에는 hex값이 필요하다. */
$background-end-rgb: 255 255 255; /* 구글 색상 선택 도구 https://g.co/kgs/MrXA6q 를 사용한다. */

$primary-glow: conic-gradient(
  from 180deg at 50% 50%,
  #16abff33 0deg,
  #0885ff33 55deg,
  #54d6ff33 120deg,
  #0071ff33 160deg,
  transparent 360deg
);
$secondary-glow: radial-gradient(
  rgba(255, 255, 255, 1),
  rgba(255, 255, 255, 0)
);

$tile-start-rgb: #eff5f9;
$tile-end-rgb: #e4e8e9;
$tile-border: conic-gradient(
  #00000080,
  #00000040,
  #00000030,
  #00000020,
  #00000010,
  #00000010,
  #00000080
);

$callout-rgb: #eef0f1;
$callout-border-rgb: #acafb0;
$card-rgb: #b4b9bc;
$card-border-rgb: #838687;

/* @media 조건 지시어를 사용하여 사용자화면이 dark 일 때 백그라운드 전역 변수에 흰색 스타일을 지정한다. */
@media (prefers-color-scheme: dark) {
  // :root { /* SCSS 에서는 인식 못함. */
    $foreground-rgb: 255 255 255;/* 주의 SCSS에서 rgb 함수의 변수에는 3개의 숫자가 필요하다. 단, 콤마는 제거한다. */
    $background-start-rgb: 0 0 0;
    $background-end-rgb: 0 0 0;

    $primary-glow: radial-gradient(rgba(1, 65, 255, 0.4), rgba(1, 65, 255, 0));
    $secondary-glow: linear-gradient(
      to bottom right,
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0.3)
    );

    $tile-start-rgb: 2, 13, 46;
    $tile-end-rgb: 2, 5, 19;
    $tile-border: conic-gradient(
      #ffffff80,
      #ffffff40,
      #ffffff30,
      #ffffff20,
      #ffffff10,
      #ffffff10,
      #ffffff80
    );

    $callout-rgb: #141414;
    $callout-border-rgb: #6c6c6c;
    $card-rgb: #646464;
    $card-border-rgb: #c8c8c8;
  // }
}

.main {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  padding: 6rem;
  min-height: 100vh;
}

.description {
  display: inherit;
  justify-content: inherit;
  align-items: inherit;
  font-size: 0.85rem;
  max-width: $max-width;
  width: 100%;
  z-index: 2;
  font-family: $font-mono; /* css 절대단위: pt(글자포인트), px(글,이미지 모두 픽셀) */
   /* 상대단위: rem(root기준 상대크기), em(상위계층기준 상대크기) */
}
/* vh = viewport height, vw = viewport width 현재 실행중인 창 크기에 맞춰 상대적 크기를 반환. 스크롤바포함 */
/* % 는 태그 내부의 크기를 기준으로 값을 반환, 그래서, 콘텐츠가 영역보다 큰 스크롤 바는 포함되지 않는다. */
/* css 선택자 3: 클래스 선택자로 . 도트를 사용. 계층형구조는 공백으로 처리한다. 예, .class명 tag명{스타일 구현} */
.description a {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 0.5rem;
}

.description p {
  position: relative;
  margin: 0;
  padding: 1rem;
  background-color: rgba($callout-rgb, 0.5);
  border: 1px solid rgba($callout-border-rgb, 0.3);
  border-radius: $border-radius;
}

.code {
  font-weight: 700;
  font-family: $font-mono;
}

.grid {
  display: grid;
  grid-template-columns: repeat(4, minmax(25%, auto));
  width: $max-width;
  max-width: 100%;
}
/* 위 minmax(최솟값, 최댓값) 함수를 사용하면 값 범위 내에서 크기가 유연하게 처리된다.=화면크기에 따른 반응형 */
.card {
  padding: 1rem 1.2rem;
  border-radius: $border-radius;
  background: rgba($card-rgb, 0);
  border: 1px solid rgba($card-border-rgb, 0);
  transition: background 200ms, border 200ms;
}

.card span {
  display: inline-block;
  transition: transform 200ms;
}

.card h2 {
  font-weight: 600;
  margin-bottom: 0.7rem;
}

.card p {
  margin: 0;
  opacity: 0.6;
  font-size: 0.9rem;
  line-height: 1.5;
  max-width: 30ch;
}

.center {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  padding: 4rem 0;
}

.center::before {
  background: $secondary-glow;
  border-radius: 50%;
  width: 480px;
  height: 360px;
  margin-left: -400px;
}

.center::after {
  background: $primary-glow;
  width: 240px;
  height: 180px;
  z-index: -1;
}

.center::before,
.center::after {
  content: '';
  left: 50%;
  position: absolute;
  filter: blur(45px);
  transform: translateZ(0);
}

.logo,
.thirteen {
  position: relative;
}

.thirteen {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 75px;
  height: 75px;
  padding: 25px 10px;
  margin-left: 16px;
  transform: translateZ(0);
  border-radius: $border-radius;
  overflow: hidden;
  box-shadow: 0px 2px 8px -1px #0000001a;
}

.thirteen::before,
.thirteen::after {
  content: '';
  position: absolute;
  z-index: -1;
}

/* Conic Gradient Animation */
.thirteen::before {
  animation: 6s rotate linear infinite;
  width: 200%;
  height: 200%;
  background: $tile-border;
}

/* Inner Square */
.thirteen::after {
  inset: 0;
  padding: 1px;
  border-radius: $border-radius;
  background: linear-gradient(
    to bottom right,
    rgba($tile-start-rgb, 1),
    rgba($tile-end-rgb, 1)
  );
  background-clip: content-box;
}

/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  .card:hover {
    background: rgba($card-rgb, 0.1);
    border: 1px solid rgba($card-border-rgb, 0.15);
  }

  .card:hover span {
    transform: translateX(4px);
  }
}

@media (prefers-reduced-motion) {
  .thirteen::before {
    animation: none;
  }

  .card:hover span {
    transform: none;
  }
}

/* Mobile */
@media (max-width: 700px) {
  .content {
    padding: 4rem;
  }

  .grid {
    grid-template-columns: 1fr;
    margin-bottom: 120px;
    max-width: 320px;
    text-align: center;
  }

  .card {
    padding: 1rem 2.5rem;
  }

  .card h2 {
    margin-bottom: 0.5rem;
  }

  .center {
    padding: 8rem 0 6rem;
  }

  .center::before {
    transform: none;
    height: 300px;
  }

  .description {
    font-size: 0.8rem;
  }

  .description a {
    padding: 1rem;
  }

  .description p,
  .description div {
    display: flex;
    justify-content: center;
    position: fixed;
    width: 100%;
  }

  .description p {
    align-items: center;
    inset: 0 0 auto;
    padding: 2rem 1rem 1.4rem;
    border-radius: 0;
    border: none;
    border-bottom: 1px solid rgba($callout-border-rgb, 0.25);
    background: linear-gradient(
      to bottom,
      rgba($background-start-rgb, 1),
      rgba($callout-rgb, 0.5)
    );
    background-clip: padding-box;
    backdrop-filter: blur(24px);
  }

  .description div {
    align-items: flex-end;
    pointer-events: none;
    inset: auto 0 0;
    padding: 2rem;
    height: 200px;
    background: linear-gradient(
      to bottom,
      transparent 0%,
      rgb($background-end-rgb) 40%
    );
    z-index: 1;
  }
}

/* Tablet and Smaller Desktop */
@media (min-width: 701px) and (max-width: 1120px) {
  .grid {
    grid-template-columns: repeat(2, 50%);
  }
}

@media (prefers-color-scheme: dark) {
  .vercelLogo {
    filter: invert(1);
  }

  .logo,
  .thirteen img {
    filter: invert(1) drop-shadow(0 0 0.3rem #ffffff70);
  }
}

@keyframes rotate {
  from {
    transform: rotate(360deg);
  }
  to {
    transform: rotate(0deg);
  }
}
